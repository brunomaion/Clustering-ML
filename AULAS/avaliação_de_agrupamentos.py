# -*- coding: utf-8 -*-
"""Avaliação de Agrupamentos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y0CVByYSNPH3hbQJhNH7dAX6Y1HrCT_r
"""

import pandas as pd
import sklearn as sk
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import scipy as sp

def plotagraficos (opiniao,modelo):
  f,(ax1,ax2)=plt.subplots(1,2,sharey=True,figsize=(15,5))
  ax1.set_title(label=modelo)
  ax1.scatter(DadosTreino['x'],DadosTreino['y'],c=opiniao,cmap="rainbow")
  ax2.set_title("Original")
  ax2.scatter(DadosTreino['x'],DadosTreino['y'],c=dados['label'],cmap="rainbow")

dados = pd.read_csv("Base3.csv")
df_dados = pd.DataFrame(dados)
sns.lmplot( x="x", y="y", data=df_dados, fit_reg=False, hue='label', legend=False)
plt.show()
print(df_dados)
print(df_dados['x'])

"""Modelo de regressão linear múltipla"""

from sklearn.cluster import KMeans
from sklearn import metrics

kmeans = KMeans(n_clusters=4, max_iter=100,random_state=15)
DadosTreino = pd.DataFrame(dados,columns=dados.columns[:-1])
kmeans.fit(DadosTreino)
X = kmeans.labels_
plotagraficos(X,'K-Means')

"""Avaliando os clusters gerados"""

from sklearn.metrics.cluster import contingency_matrix
from scipy.stats import entropy
import math

print("\nSoma dos quadrados das distâncias até o centróide mais próximo: ",kmeans.inertia_)

print("\nCoesão: ",math.sqrt(kmeans.inertia_)/kmeans.n_clusters)

print("\nCoeficiente de Silhueta: ",metrics.silhouette_score(DadosTreino,kmeans.labels_))

print("\nRand Score K-means: ",metrics.rand_score(dados['label'],kmeans.labels_))

print("\nHomogeneidade : ",metrics.homogeneity_score(dados['label'],kmeans.labels_))

print("\nCompletude : ",metrics.completeness_score(dados['label'],kmeans.labels_))

print("\nMatriz de contingência kmeans\n", contingency_matrix(dados['label'], kmeans.labels_))

from sklearn.cluster import DBSCAN

DadosTreino = pd.DataFrame(dados,columns=dados.columns[:-1])
db = DBSCAN(eps=0.7, min_samples=25)
db.fit(DadosTreino)
X = db.labels_
plotagraficos(X,'DBScan')

from sklearn.metrics.cluster import contingency_matrix
from scipy.stats import entropy
import math

print("\nSoma dos quadrados das distâncias até o centróide mais próximo: ",db.inertia_)

print("\nCoesão: ",math.sqrt(db.inertia_)/db.n_clusters)

print("\nCoeficiente de Silhueta: ",metrics.silhouette_score(DadosTreino,db.labels_))

print("\nRand Score K-means: ",metrics.rand_score(dados['label'],db.labels_))

print("\nHomogeneidade : ",metrics.homogeneity_score(dados['label'],db.labels_))

print("\nCompletude : ",metrics.completeness_score(dados['label'],db.labels_))

print("\nMatriz de contingência kmeans\n", contingency_matrix(dados['label'], db.labels_))

from sklearn.cluster import AgglomerativeClustering

DadosTreino = pd.DataFrame(dados,columns=dados.columns[:-1])
Agnes = AgglomerativeClustering(n_clusters=20,linkage='ward')
Agnes.fit(DadosTreino)
X = Agnes.labels_
plotagraficos(X,'AGNES')

from sklearn.metrics.cluster import contingency_matrix
from scipy.stats import entropy
import math

#print("\nSoma dos quadrados das distâncias até o centróide mais próximo: ",Agnes.inertia_)

#print("\nCoesão: ",math.sqrt(Agnes.inertia_)/Agnes.n_clusters)

print("\nCoeficiente de Silhueta: ",metrics.silhouette_score(DadosTreino,Agnes.labels_))

print("\nRand Score K-means: ",metrics.rand_score(dados['label'],Agnes.labels_))

print("\nHomogeneidade : ",metrics.homogeneity_score(dados['label'],Agnes.labels_))

print("\nCompletude : ",metrics.completeness_score(dados['label'],Agnes.labels_))

print("\nMatriz de contingência kmeans\n", contingency_matrix(dados['label'], Agnes.labels_))